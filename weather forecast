import requests
import time


city = 'Miami, US'
city_id = 0
appid = "cbef99a3cbefe4b3787cf92d537b8f54"


try:
    res = requests.get("http://api.openweathermap.org/data/2.5/find",
                 params={'q': city, 'type': 'like', 'units': 'metric', 'APPID': appid})
    data = res.json()
    cities = ["{} ({})".format(d['name'], d['sys']['country'])
              for d in data['list']]
    city_id = data['list'][0]['id']
except Exception as e:
    print("Exception (find):", e)
    pass


try:
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                       params={'id': city_id, 'units': 'metric', 'lang': 'eng', 'APPID': appid})
    data = res.json()
    store_data = []
    morning_weather = []
    afternoon_weather = []
    sky = []
    k = 0
    for i in data['list']:
        a = i['dt_txt']
        b = a.split(" ")
        a = [b, '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']]
        store_data.append(a)
        clouds = store_data[0][2]
        hour = store_data[k][0][1]
        date = store_data[k][0][0]
        if hour in "12:00:00" and date not in morning_weather and len(morning_weather) < 8:
            morning_weather.append(date)
            morning_weather.append(store_data[k][1])
            sky.append(date)
            sky.append(store_data[k][2])
        if hour in "18:00:00" and date not in afternoon_weather and len(afternoon_weather) < 8:
            afternoon_weather.append(date)
            afternoon_weather.append(store_data[k][1])
        k += 1
    pogoda = morning_weather + afternoon_weather
    a = time.ctime()
    months = [
        ["Months"], ["January"], ["February"],
        ["March"], ["April"], ["May"], ["June"],
    ]
    day = int(a[8:10])
    days_time = [
        ["Mon"], ["Tue"], ["Wed"], ["Thu"],
        ["Fri"], ["Sat"], ["Sun"], ["Mon"],
        ["Tue"], ["Wed"], ["Thu"], ["Fri"],
        ["Sat"], ["Sun"]]
    for i in range(0, len(days_time)):
        if days_time[i][0] in a:
            day_count = i
            break
    key = 0
    while key < len(months):
        if months[key][0] in a:
            break
        key += 1
    year_month = "2019-" + "0" + str(key) + "-"
    num = 1
    final_temps = []
    dates = []
    while num < 4:
        sum_day = day + num
        if 9 < sum_day < 31:
            data2 = year_month + str(sum_day)
        elif sum_day > 31:
            sum_day = sum_day - 31
            data2 = "2019-" + "0" + str(key+1) + "-" + "0" + str(sum_day)
        elif sum_day < 9:
            data2 = year_month + "0" + str(sum_day)
        for i in range(0, len(pogoda)):
            if data2 in pogoda[i]:
                final_temps.append(pogoda[i+1])
        dates.append(data2)
        num += 1
    p = {"q": city,
    "APPID": appid, "units": "metric",
    }
    now = requests.get("http://api.openweathermap.org/data/2.5/weather", params=p)
    now = now.json()
    temperature = now["main"]["temp"]
    counter_day = 1
    min = 0
    max = 1
    count_week_day = 0
    day_of_week = days_time[day_count + 2][0]
    day_of_week_more = days_time[day_count + 3][0]
    days = ["Tomorrow", day_of_week, day_of_week_more]
    print("Now", "+" + str(round(temperature)), clouds)
    while counter_day < 4:
        for i in range(0, len(sky), 2):
            if dates[count_week_day] in sky[i]:
                condition = sky[i+1]
                break
        print(days[count_week_day], final_temps[min], final_temps[max], condition)
        min += 2
        max += 2
        counter_day += 1
        count_week_day += 1

except Exception as e:
    print("Exception (forecast):", e)
    pass

