import requests
import time
import telebot
from telebot import apihelper
from emoji import emojize


def check_data(word):
    with open("cities.txt", "r") as f:
        data = []
        for i in f:
            data.append(i.strip("\n"))
        if word.upper() in data:
            return word
        else:
            return 0


def process_data(word, result):
    a = result.text
    a = list(a.split(">"))
    i = 0
    data = []
    while i < len(a):
        if a[i] == '<comparables':
            i += 1
            link = a[i].strip('</comparables')
        elif a[i] == "<street":
            i += 1
            street = a[i]
            mix = []
            for key in street:
                if key != "<":
                    mix.append(key)
                else:
                    break
            street = "".join(mix)
        elif a[i] == '<amount currency="USD"':
            i += 1
            try:
                number = int(a[i].strip("</amount"))
                data.append(link)
                data.append(street)
                data.append(number)
            except:
                Exception
        i += 1
    low = -data[2]
    high = data[2]
    pos_1 = 2
    pos_2 = 2
    for i in range(2, len(data), 3):
        price = int(word) - data[i]
        if price < 0 and price > low:
            low = price
            pos_1 = i
        elif price > 0 and price < high:
            high = price
            pos_2 = i
    low = -low
    if low < high:
        link = data[pos_1-2]
        street = data[pos_1-1]
        price = data[pos_1]
    else:
        link = data[pos_2-2]
        street = data[pos_2-1]
        price = data[pos_2]
    price = str(price)
    if len(price) == 5:
        price = price[0:2] + " " + price[2:5]
    elif len(price) == 6:
        price = price[0:3] + " " + price[3:6]
    elif len(price) == 7:
        price = price[0] + " " + price[1:4] + " " + price[4:7]
    return link, street, price


def weather_process(city):
    city = city + ", US"
    city_id = 0
    appid = "cbef99a3cbefe4b3787cf92d537b8f54"
    try:
        p = {'q': city, 'type': 'like', 'units': 'metric', 'APPID': appid}
        URL = "http://api.openweathermap.org/data/2.5/find"
        res = requests.get(URL, params=p)
        data = res.json()
        city_id = data['list'][0]['id']
    except Exception as e:
        print("Exception (find):", e)
        pass
    try:
        p = {'id': city_id, 'units': 'metric', 'lang': 'eng', 'APPID': appid}
        URL = "http://api.openweathermap.org/data/2.5/forecast"
        res = requests.get(URL, params=p)
        data = res.json()
        store_data = []
        morning_weather = m_w = []
        afternoon_weather = a_w = []
        sky = []
        k = 0
        for i in data['list']:
            a = i['dt_txt']
            b = a.split(" ")
            a = [b, '{0:+3.0f}'.format(i['main']['temp']), i['weather'][0]['description']]
            store_data.append(a)
            clouds = store_data[0][2]
            hour = store_data[k][0][1]
            date = store_data[k][0][0]
            if hour in "12:00:00" and date not in m_w and len(m_w) < 8:
                morning_weather.append(date)
                morning_weather.append(store_data[k][1])
                sky.append(date)
                sky.append(store_data[k][2])
            if hour in "18:00:00" and date not in a_w and len(a_w) < 8:
                afternoon_weather.append(date)
                afternoon_weather.append(store_data[k][1])
            k += 1
        pogoda = morning_weather + afternoon_weather
        a = time.ctime()
        months = [
            ["Months"], ["Jan"], ["Feb"],
            ["Mar"], ["Apr"], ["May"], ["Jun"],
            ["Jul"], ["Aug"], ["Sep"], ["Nov"],
            ["Dec"]
        ]
        day = int(a[8:10])
        days_time = [
            ["Mon"], ["Tue"], ["Wed"], ["Thu"],
            ["Fri"], ["Sat"], ["Sun"], ["Mon"],
            ["Tue"], ["Wed"], ["Thu"], ["Fri"],
            ["Sat"], ["Sun"]]
        for i in range(0, len(days_time)):
            if days_time[i][0] in a:
                day_count = i
                break
        key = 0
        while key < len(months):
            if months[key][0] in a:
                break
            key += 1
        year_month = "2019-" + "0" + str(key) + "-"
        num = 1
        final_temps = []
        dates = []
        while num < 4:
            sum_day = day + num
            if 10 <= sum_day <= 31:
                data2 = year_month + str(sum_day)
            elif sum_day > 31:
                sum_day = sum_day - 31
                data2 = "2019-" + "0" + str(key+1) + "-" + "0" + str(sum_day)
            elif sum_day < 10:
                data2 = year_month + "0" + str(sum_day)
            for i in range(0, len(pogoda)):
                if data2 in pogoda[i]:
                    final_temps.append(pogoda[i+1])
            dates.append(data2)
            num += 1
        p = {"q": city, "APPID": appid, "units": "metric"}
        URL = "http://api.openweathermap.org/data/2.5/weather"
        now = requests.get(URL, params=p)
        now = now.json()
        temperature = now["main"]["temp"]
        counter_day = 1
        min = 0
        max = 1
        count_week_day = 0
        day_of_week = days_time[day_count + 2][0]
        day_of_week_more = days_time[day_count + 3][0]
        days = ["Tomorrow", day_of_week, day_of_week_more]
        print_now = ["Now", "+" + str(round(temperature)), clouds]
        print_next_days = []
        while counter_day < 4:
            for i in range(0, len(sky), 2):
                if dates[count_week_day] in sky[i]:
                    cond = sky[i+1]
                    break
            row = [days[count_week_day], final_temps[min], final_temps[max], cond]
            print_next_days.append(row)
            min += 2
            max += 2
            counter_day += 1
            count_week_day += 1
        return print_now, print_next_days
    except Exception as e:
        print("Exception (forecast):", e)
        pass


def emoji_process(condition):
    dict = {}
    with open("emoji.txt", "r") as f:
        line = f.readline()
        while len(line) > 1:
            line = line.strip("\n")
            parts = line.split(", ")
            dict[parts[0]] = parts[1]
            line = f.readline()
    return dict[condition]


apihelper.proxy = {'https': '188.217.238.87:8118'}
TOKEN = '712198756:AAFum0yBbaIkZf_0vdSLEEFOUO-A_526dII'
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(content_types=['text'])
def start(message):
    word = message.text
    if word == "/start":
        welcome = bot.send_message(message.from_user.id, "Hello, write a city where you want to buy a house in the US")
    else:
        city = check_data(word)
        if city == 0:
            msg = bot.send_message(message.from_user.id, "We're sorry, we don't provide our service for this place")
        else:
            msg = bot.send_message(message.from_user.id, "Write the appropriate price: ")
            URL = ('http://www.zillow.com/webservice/GetSearchResults.htm?zws-id=X1-ZWz17xlur7ze2z_5kvb6&address=street&citystatezip=' + str(word))
            result = requests.get(URL)
            bot.register_next_step_handler(message, price, result, city)


def price(message, result, city):
    try:
        flag = True
        word = message.text
        a = str(word)
        a = a.split()
        word = int("".join(a))
        if 10000 < word < 25000000:
                link, street, number = process_data(word, result)
                msg1 = bot.send_message(message.from_user.id, "This is your link: " + link)
                msg2 = bot.send_message(message.from_user.id, "The address is: " + street)
                msg3 = bot.send_message(message.from_user.id, emojize("The price is: " + str(number) + " :heavy_dollar_sign:", use_aliases=True))
                msg4 = bot.send_message(message.from_user.id, "Do you want to get the weather, here?")
                bot.register_next_step_handler(message, weather, city)
                flag = False
        else:
            msg = bot.send_message(message.from_user.id, "The price is not compatible, write another one")
            bot.register_next_step_handler(message, price, result, city)
    except:
        msg = bot.send_message(message.from_user.id, "Wrong price, write a real number")
        bot.register_next_step_handler(message, price, result, city)


def weather(message, city):
    word = message.text
    words = ["YES", "YEAH", "YA", "SURE", "OF COURSE", "YEP", "DA"]
    initial = ":Russia:"
    if word.upper() in words:
        print_1, print_2 = weather_process(city)
        a = print_1[0] + " " + print_1[1]
        condition = print_1[2]
        try:
            result = emoji_process(condition)
        except Exception:
            result = initial
        msg1 = bot.send_message(message.from_user.id, emojize(a + " " + result, use_aliases=True))
        for i in range(0, len(print_2)):
            a = print_2[i][0] + " " + print_2[i][1] + " " + print_2[i][2]
            condition = print_2[i][3]
            try:
                result = emoji_process(condition)
            except Exception:
                result = initial
            msg2 = bot.send_message(message.from_user.id, emojize(a + " " + result, use_aliases=True))
    else:
        msg5 = bot.send_message(message.from_user.id, "Ok, thank's for using our service")
bot.polling()
